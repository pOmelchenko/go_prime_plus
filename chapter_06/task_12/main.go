package main

import "fmt"

// Упражнение по программированию 6.12
//
// Взгляните на следующие две бесконечных последовательности:
// <pre>
// 1.0 + 1.0/2.0 + 1.0/3.0 + 1.0/4.0 + ...<br>
// 1.0 - 1.0/2.0 + 1.0/3.0 - 1.0/4.0 + ...
// </pre>
// Напишите программу, которая подсчитывает промежуточные суммы этих двух последовательностей до тех пор, пока не будет
// обработано заданное количество элементов. Подсказка: произведение нечетного количества значений <code>-1</code>
// равно <code>-1</code>, а произведение четного количества значений <code>-1</code> равно <code>1</code>. Предоставьте
// пользователю возможность вводить предел интерактивно; нулевое или отрицательное значение должно завершать ввод.
// Просмотрите промежуточные суммы для <code>100</code>б <code>1000</code> и <code>10000</code> элементов. Сходятся ли
// эти последовательности к какому-то значению?
func main() {
	var input int

	fmt.Print("Введите количество элементов: ")
	fmt.Scan(&input)

	for 0 < input {
		fmt.Printf("Результат вычислений для суммы:    %e\n", calculate_pattern_a(input))
		fmt.Printf("Результат вычислений для разности: %e\n", calculate_pattern_b(input))

		fmt.Print("Введите количество элементов, или число меньше 1, чтобы прекратить работу: ")
		fmt.Scan(&input)
	}

	fmt.Print("Удачи!")

	// Результат работы:
	//Введите количество элементов, или число меньше 1, чтобы прекратить работу: 100
	//Результат вычислений для суммы:    5.187378e+00
	//Результат вычислений для разности: 6.881718e-01
	//Введите количество элементов, или число меньше 1, чтобы прекратить работу: 1000
	//Результат вычислений для суммы:    7.485478e+00
	//Результат вычислений для разности: 6.926457e-01
	//Введите количество элементов, или число меньше 1, чтобы прекратить работу: 10000
	//Результат вычислений для суммы:    9.787613e+00
	//Результат вычислений для разности: 6.930915e-01
	//Введите количество элементов, или число меньше 1, чтобы прекратить работу: 0
	//Удачи!
}

func calculate_pattern_a(value int) float32 {
	var result float32 = 0.0
	var element int

	for element = 0; element < value; element++ {
		result = result + 1.0/(float32(element)+1)
	}

	return result
}

func calculate_pattern_b(value int) float32 {
	var result float32 = 0.0
	var element int

	for element = 0; element < value; element = element + 2 {
		result = result + 1.0/(float32(element)+1)
		result = result - 1.0/(float32(element)+2)
	}

	return result
}
