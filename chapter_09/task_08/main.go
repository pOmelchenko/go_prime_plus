package main

import "fmt"

// Упражнение по программированию 9.8
//
// В главе 6 была показана функция <code>power()</code> (листинг 6.20), которая возвращает результат возведения
// числа <code>double</code> в положительную целую степень. Усовершенствуйте эту функцию, чтобы она корректно возводила
// числа в отрицательные степени. Кроме того, добавьте в функцию возможность оценки как 0 результата возведения 0 в
// любую степень кроме 0 и оценки как 1 результата возведения любого числа в степень 0. (Функция должна сообщать, что
// результат возведения 0 в степень 0 не определен и что она использует значение 1.)
// Примените цикл. Протестируйте функцию в какой-нибудь программе.
func main() {
	var (
		x, xpow float32
		exp     int
	)

	fmt.Println("Введите число и целую степень, в которую число будет возведено.")
	fmt.Println("Для завершения программы введите q")

	for {
		_, err := fmt.Scanf("%lf%d", &x, &exp)
		if err != nil {
			return
		}

		xpow = power(x, exp)
		fmt.Printf("%.3g в степени %d равно %.5g\n", x, exp, xpow)
		fmt.Println("Введите следующую пару чисел или q для завершения.")
	}
	fmt.Println("Надеемся, что вы оценили это упражнение -- до свиданья!")
}

func power(n float32, p int) float32 {
	var pow float32 = 1
	var i int

	if p != 0 && n == 0 {
		return 0
	}

	if p == 0 && n != 0 {
		return 1
	}

	if n == 0 && p == 0 {
		fmt.Println("!! Результат не определен")
		return 1
	}

	if p > 0 {
		for i = 1; i <= p; i++ {
			pow *= n
		}
	}

	if p < 0 {
		p *= -1
		for i = 1; i <= p; i++ {
			pow *= n
			pow = 1 / pow
		}
	}

	return pow
}
